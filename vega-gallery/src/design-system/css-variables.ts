/**
 * CSS Custom Properties Generator
 * Converts design tokens to CSS custom properties for use throughout the application
 */

import { designTokens } from './tokens';

// Helper function to convert hex to RGB
const hexToRgb = (hex: string): string => {
  if (!hex || typeof hex !== 'string' || !hex.includes('#')) {
    return '0, 0, 0';
  }
  
  const cleanHex = hex.replace('#', '');
  const r = parseInt(cleanHex.length === 3 ? cleanHex[0] + cleanHex[0] : cleanHex.substring(0, 2), 16);
  const g = parseInt(cleanHex.length === 3 ? cleanHex[1] + cleanHex[1] : cleanHex.substring(2, 4), 16);
  const b = parseInt(cleanHex.length === 3 ? cleanHex[2] + cleanHex[2] : cleanHex.substring(4, 6), 16);
  
  if (isNaN(r) || isNaN(g) || isNaN(b)) {
    return '0, 0, 0';
  }
  
  return `${r}, ${g}, ${b}`;
};

// Helper function to convert tokens to CSS custom properties
const tokensToCSSVars = (tokens: Record<string, any>, prefix = ''): string => {
  let cssVars = '';
  
  Object.entries(tokens).forEach(([key, value]) => {
    const varName = prefix ? `--${prefix}-${key}` : `--${key}`;
    
    if (typeof value === 'object' && value !== null && !Array.isArray(value)) {
      // Recursively handle nested objects
      cssVars += tokensToCSSVars(value, `${prefix ? `${prefix}-` : ''}${key}`);
      
      // Add RGB variants for color objects
      if (prefix === 'color' && typeof value === 'object' && Object.values(value).some(v => typeof v === 'string' && v.includes('#'))) {
        Object.entries(value).forEach(([colorKey, colorValue]) => {
          if (typeof colorValue === 'string' && colorValue.includes('#')) {
            const rgbVarName = `--color-${key}-${colorKey}-rgb`;
            cssVars += `${rgbVarName}: ${hexToRgb(colorValue)};\n  `;
          }
        });
      }
    } else {
      // Handle primitive values
      cssVars += `${varName}: ${value};\n  `;
    }
  });
  
  return cssVars;
};

// Generate CSS custom properties for light theme
export const lightThemeVars = `
:root {
  /* Color Tokens */
  ${tokensToCSSVars(designTokens.colors, 'color')}
  
  /* Spacing Tokens */
  ${tokensToCSSVars(designTokens.spacing, 'spacing')}
  
  /* Typography Tokens */
  ${tokensToCSSVars(designTokens.typography, 'typography')}
  
  /* Border Radius Tokens */
  ${tokensToCSSVars(designTokens.borderRadius, 'radius')}
  
  /* Border Radius Intent Tokens */
  ${tokensToCSSVars(designTokens.borderRadiusIntent, 'radius-intent')}
  
  /* Shadow Tokens */
  ${tokensToCSSVars(designTokens.shadows, 'shadow')}
  
  /* Z-Index Tokens */
  ${tokensToCSSVars(designTokens.zIndex, 'z')}
  
  /* Transition Tokens */
  ${tokensToCSSVars(designTokens.transitions, 'transition')}
  
  /* Component Tokens */
  ${tokensToCSSVars(designTokens.components, 'component')}
  
  /* Semantic Color Aliases */
  --color-primary: var(--color-primary-500);
  --color-primary-dark: var(--color-primary-700);
  --color-primary-light: var(--color-primary-100);
  --color-primary-rgb: var(--color-primary-500-rgb);
  
  --color-secondary: var(--color-secondary-500);
  --color-secondary-dark: var(--color-secondary-700);
  --color-secondary-light: var(--color-secondary-100);
  --color-secondary-rgb: var(--color-secondary-500-rgb);
  
  --color-tertiary: var(--color-tertiary-500);
  --color-tertiary-dark: var(--color-tertiary-700);
  --color-tertiary-light: var(--color-tertiary-100);
  --color-tertiary-rgb: var(--color-tertiary-500-rgb);
  
  --color-success: var(--color-success-500);
  --color-warning: var(--color-warning-500);
  --color-error: var(--color-error-500);
  --color-info: var(--color-info-500);
  
  /* Background Aliases */
  --color-background: var(--color-background-primary);
  --color-surface: var(--color-surface-primary);
  
  /* Text Aliases */
  --color-text: var(--color-text-primary);
  --color-text-primary: var(--color-text-primary);
  --color-text-secondary: var(--color-text-secondary);
  --color-text-tertiary: var(--color-text-tertiary);
  --color-text-inverse: var(--color-text-inverse);
  
  /* Border Aliases */
  --color-border: var(--color-border-light);
  
  /* Spacing Aliases */
  --spacing-xs: var(--spacing-1);
  --spacing-sm: var(--spacing-2);
  --spacing-md: var(--spacing-4);
  --spacing-lg: var(--spacing-6);
  --spacing-xl: var(--spacing-8);
  
  /* Typography Aliases */
  --font-family-primary: var(--typography-fontFamily-primary);
  --font-family-mono: var(--typography-fontFamily-mono);
  --font-size-sm: var(--typography-fontSize-sm);
  --font-size-base: var(--typography-fontSize-base);
  --font-size-lg: var(--typography-fontSize-lg);
  
  /* Surface Colors */
  --color-surface-hover: rgba(0, 0, 0, 0.04);
  --color-surface-active: rgba(0, 0, 0, 0.08);
  --color-surface-disabled: rgba(0, 0, 0, 0.12);
  
  /* Shadow Aliases - these are already generated by tokensToCSSVars */
  
  /* Border Radius Aliases */
  --radius-button: var(--radius-intent-button-primary);
  --radius-input: var(--radius-intent-input-default);
  --radius-card: var(--radius-intent-card-default);
  --radius-badge: var(--radius-intent-badge-default);
  --radius-modal: var(--radius-intent-modal-default);
  --radius-tooltip: var(--radius-intent-tooltip);
  --radius-chart-card: var(--radius-intent-chart-card);
  --radius-chart-container: var(--radius-intent-chart-container);
  --radius-section: var(--radius-intent-section-container);
  --radius-panel: var(--radius-intent-section-panel);
  
  /* Transition Aliases - these are already generated by tokensToCSSVars */
  
  /* Component Aliases - these are already generated by tokensToCSSVars */
}
`;

// Generate CSS custom properties for dark theme
export const darkThemeVars = `
[data-theme="dark"] {
  /* Override light theme colors with dark variants */
  --color-text: rgba(255, 255, 255, 0.87);
  --color-text-primary: rgba(255, 255, 255, 0.87);
  --color-text-secondary: rgba(255, 255, 255, 0.6);
  --color-text-tertiary: rgba(255, 255, 255, 0.38);
  --color-text-disabled: rgba(255, 255, 255, 0.12);
  --color-text-inverse: rgba(0, 0, 0, 0.87);
  
  --color-background-primary: #121212;
  --color-background-secondary: #1e1e1e;
  --color-background-tertiary: #2c2c2c;
  
  --color-surface-primary: #1e1e1e;
  --color-surface-secondary: #2c2c2c;
  --color-surface-tertiary: #383838;
  --color-surface-hover: rgba(255, 255, 255, 0.04);
  --color-surface-active: rgba(255, 255, 255, 0.08);
  --color-surface-disabled: rgba(255, 255, 255, 0.12);
  
  --color-border-light: rgba(255, 255, 255, 0.12);
  --color-border-medium: rgba(255, 255, 255, 0.23);
  --color-border-strong: rgba(255, 255, 255, 0.38);
  
  /* Keep semantic colors but adjust if needed */
  --color-primary: var(--color-primary-300);
  --color-primary-dark: var(--color-primary-400);
  --color-primary-light: var(--color-primary-200);
  --color-primary-rgb: var(--color-primary-300-rgb);
}
`;

// Complete CSS variables string
export const cssVariables = `${lightThemeVars}\n${darkThemeVars}`;

// Utility function to get CSS custom property value
export const getCSSVar = (varName: string): string => 
  `var(--${varName})`;

// Utility function to get nested CSS custom property value
export const getNestedCSSVar = (prefix: string, suffix: string): string => 
  `var(--${prefix}-${suffix})`;
